#nocap;

const rNewlineCharCode = 13;

package TableReader {

    fn readTable(path: String) -> arr arr Char {
        val s = readFile(path);
        val linesCnt = countLines(s);
        val linesLength = findLinesLength(s);
        val table = arr arr Char[linesCnt];
        for var i = 0; i < len table; i += 1 {
            table[i] = arr Char[linesLength];
        };
        for var si = 0, var i = 0; si < len s; si += 1 {
            val c = s[si];
            if c != '\n' {
                table[i / linesLength][i % linesLength] = c;
                i += 1;
            }
        };
        return table;
    }

    private fn countLines(s: String) -> Int {
        var cnt = 1;
        for var i = 0; i < len s; i += 1 {
            if s[i] == '\n' {
                cnt += 1;
            }
        };
        return cnt;
    }

    private fn findLinesLength(s: String) -> Int {
        var length = -1;
        var currCnt = 0;
        for var i = 0; i < len s; i += 1 {
            if s[i] == '\n' {
                if length < 0 {
                    length = currCnt;
                } else if currCnt != length {
                    panic "grid formatting error: not all lines have the same length"
                };
                currCnt = 0;
            } else {
                currCnt += 1;
            }
        };
        return length;
    }

    private fn readFile(path: String) -> String {
        val fh = fs.openR(path);
        var result = "";
        var stop = false;
        while !stop {
            val c = fs.read(fh);
            stop = c == -1;
            if !stop && c != rNewlineCharCode {
                result += (c as Char) as String;
            }
        };
        fs.close(fh);
        return result;
    }

    private fn assert(cond: Bool, msg: String){
        if !cond {
            panic msg
        }
    }

}
