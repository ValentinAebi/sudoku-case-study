
package Main {

    main fn solver_main(args: arr String){

        // Parse arguments
        val filename: String;
        if args[0] == "1" {
            filename = "./grids/grid1.txt";
        } else if args[0] == "2" {
            filename = "./grids/grid2.txt";
        } else {
            panic "unrecognized argument";
        };

        // use TableReader library to read the sudoku grid in the file
        val rawCharsGrid: arr^# arr^# Char;
        enclosed {fs} {
            rawCharsGrid = TableReader.readTable(filename);
        };

        // copy the table produced by the unchecked library into a table that we fully control
        val cgr = newreg;
        val charsGrid = sanitizeTable(rawCharsGrid, cgr);

        assert(len charsGrid == gridDim, "wrong grid height");
        assert(len charsGrid[0] == gridDim, "wrong grid width");

        // Create the grid and display its state before solving
        val frameR = newreg;
        val valuesR = newreg;
        val grid = GridMaker.mkGrid(frameR, valuesR, cgr, charsGrid);
        printFormatted(grid);
        console.print("\n" + grid.missingCnt() as String + " empty cells\n\n\n");

        // Perform resolution. Thanks to the restricted block, the Solver package is not allowed to use devices.
        val result: ResolutionResult;
        restricted {grid} {
            result = Solver.solve(grid);
        };
        if result is ResolutionSuccess {
            console.print("Resolution succeeded with " + result.maxBacktrackDepth as String + " guessed step(s)\n");
            printFormatted(grid);
            console.print("\n" + grid.missingCnt() as String + " empty cells");
        } else {
            console.print("Resolution failed\n");
        };
    }

    private fn printFormatted(grid: Grid^){
        val tableR = newreg;
        val charsTable = grid.toCharsTable(tableR);
        enclosed {console} {
            val tableCopy = #(arr@newreg arr^# Char[len charsTable]);
            for var i = 0; i < len tableCopy; i += 1 {
                tableCopy[i] = #charsTable[i];
            };
            (new GridFormatter(sectorDim, sectorDim)).format(tableCopy);
        };
    }

    private fn sanitizeTable(rawTable: arr^# arr^# Char, r: Region^) -> arr^{r} arr^{r} Char {
        val res: arr^{r} arr^{r} Char;
        enclosed {r} {
            res = arr@r arr^{r} Char[len rawTable];
            for var i = 0; i < len rawTable; i += 1 {
                val rawRow = rawTable[i];
                res[i] = arr@r Char[len rawRow];
                for var j = 0; j < len rawRow; j += 1 {
                    res[i][j] = rawRow[j];
                }
            };
        };
        return res;
    }

    private fn assert(cond: Bool, msg: String){
        if !cond {
            panic msg
        }
    }

}
