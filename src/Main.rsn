
const sectorDim: Int = 3;
const gridDim: Int = 9;

package Main {

    main fn solver_main(arr String){
        val frameR = newregion;
        val valuesR = newregion;
        val rawCharsGrid: arr^# arr Char;
        enclosed {fs} {
            rawCharsGrid = IntTableReader.readTable("./grids/grid1.txt");
        };
        val cgr = newregion;
        val charsGrid: arr^{cgr} arr^{cgr} Char;
        enclosed {} {
            charsGrid = sanitizeTable(rawCharsGrid, cgr);
        };
        assert(len charsGrid == gridDim, "wrong grid height");
        assert(len charsGrid[0] == gridDim, "wrong grid width");
        val grid = GridMaker.mkGrid(frameR, valuesR, cgr, charsGrid);
        val tableR = newregion;
        enclosed {console, tableR} {
            (new GridFormatter(sectorDim, sectorDim)).format(#grid.toCharsTable(tableR));
        };
    }

    fn sanitizeTable(rawTable: arr^# arr Char, r: Region^) -> arr^{r} arr^{r} Char {
        val res: arr^{r} arr^{r} Char;
        enclosed {r} {
            res = arr@r arr^{r} Char[len rawTable];
            for var i = 0; i < len rawTable; i += 1 {
                val rawRow = rawTable[i];
                res[i] = arr@r Char[len rawRow];
                for var j = 0; j < len rawRow; j += 1 {
                    res[i][j] = rawRow[j];
                }
            };
        };
        return res;
    }

    fn assert(cond: Bool, msg: String){
        if !cond {
            panic msg
        }
    }

}
