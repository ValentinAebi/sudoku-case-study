
const sectorDim: Int = 3;
const gridDim: Int = 9;

const emptyCellMarker: Int = 0;


module Grid(frameR: Region^, cellsR: Region^, cells: arr^{frameR} arr^{frameR} Cell^{cellsR}, package CharsConversion){

    fn deepCopy(cfr: Region^, ccr: Region^) -> Grid^{cfr, ccr} {
        val cells = arr@cfr arr^{cfr} Cell^{ccr}[len me.cells];
        for var l = 0; l < len cells; l += 1 {
            cells[l] = arr@cfr Cell^{ccr}[len me.cells[l]];
            for var c = 0; c < len cells[l]; c += 1 {
                val origCell = me.cells[l][c];
                cells[l][c] = Cells.mkCell(ccr, origCell.value);
            }
        };
        return new Grid(cfr, ccr, cells);
    }

    fn toString() -> String {
        var str = "";
        for var r = 0; r < len me.cells; r += 1 {
            val row = me.cells[r];
            for var c = 0; c < len row; c += 1 {
                val cell = row[c];
                str += CharsConversion.stringReprOf(cell.value);
            };
            str += "\n";
        };
        return str;
    }

    fn toCharsTable(r: Region^) -> arr^{r} arr^{r} Char {
        val table = arr@r arr^{r} Char[len me.cells];
        for var l = 0; l < len me.cells; l += 1 {
            table[l] = arr@r Char[len me.cells[l]];
            for var c = 0; c < len me.cells[l]; c += 1 {
                val iValue = me.cells[l][c].value;
                table[l][c] = when iValue == 0 then ' ' else CharsConversion.reprOf(iValue);
            }
        };
        return table;
    }

    fn copyValuesFrom(src: Grid^){
        val dst = me;
        for var l = 0; l < len dst.cells; l += 1 {
            for var c = 0; c < len dst.cells[l]; c += 1 {
                val srcCell = src.cells[l][c];
                val dstCell = dst.cells[l][c];
                if dstCell.value == emptyCellMarker {
                    dstCell.value = srcCell.value;
                } else if srcCell.value != dstCell.value {
                    panic "trying to copy from an incompatible grid"
                }
            }
        };
    }

    fn getGuesses(frr: Region^, cr: Region^) -> arr^ Grid^{frr, cr} {
        val r = newreg;
        val guessCellIdx = idxOfCellWithLeastCandidates();
        if guessCellIdx == -1 {
            return arr@r Grid^{frr, cr}[0];
        } else {
            val guessCell = cellAtIdx(guessCellIdx);
            val candidatesCnt = Cells.countCandidates(guessCell);
            val guesses = arr@r Grid^{frr, cr}[candidatesCnt];
            var guessIdx = 0;
            for var i = 0; i < gridDim; i += 1 {
                if guessCell.candidates[i] {
                    val guess = deepCopy(frr, cr);
                    guess.cellAtIdx(guessCellIdx).value = i + 1;
                    guesses[guessIdx] = guess;
                    guessIdx += 1;
                }
            };
            return guesses;
        }
    }

    private fn idxOfCellWithLeastCandidates() -> Int {
        var bestIdx = -1;
        var bestCandidatesCnt = gridDim + 1;
        for var i = 0; i < gridDim*gridDim; i += 1 {
            val candidatesCnt = Cells.countCandidates(cellAtIdx(i));
            if 0 < candidatesCnt && candidatesCnt < bestCandidatesCnt {
                bestIdx = i;
                bestCandidatesCnt = candidatesCnt;
            }
        };
        return bestIdx;
    }

    private fn cellAtIdx(flatIdx: Int) -> Cell^{me.cellsR} {
        val l = flatIdx / gridDim;
        val c = flatIdx % gridDim;
        return me.cells[l][c];
    }

    fn isComplete() -> Bool {
        for var l = 0; l < gridDim; l += 1 {
            for var c = 0; c < gridDim; c += 1 {
                if me.cells[l][c].value == emptyCellMarker {
                    return false;
                }
            }
        };
        return true;
    }

    fn missingCnt() -> Int {
        var cnt = 0;
        for var l = 0; l < gridDim; l += 1 {
            for var c = 0; c < gridDim; c += 1 {
                if me.cells[l][c].value == emptyCellMarker {
                    cnt += 1;
                }
            }
        };
        return cnt;
    }

    fn getSectors() -> arr^{me.frameR} Sector^{me.frameR, me.cellsR} {
        val nRows = gridDim;
        val nCols = gridDim;
        val nSquares = (gridDim / sectorDim) * (gridDim / sectorDim);
        val sectors = arr@me.frameR Sector^{me.frameR, me.cellsR}[nRows + nCols + nSquares];
        mkRowsSectors(sectors, 0);
        mkColsSectors(sectors, nRows);
        mkSquareSectors(sectors, nRows + nCols);
        return sectors;
    }

    private fn mkRowsSectors(sectors: arr^ Sector^{me.frameR, me.cellsR}, beginIdx: Int) {
        for var l = 0; l < gridDim; l += 1 {
            sectors[beginIdx + l] = new Sector(me.cellsR, me.cells[l]);
        }
    }

    private fn mkColsSectors(sectors: arr^ Sector^{me.frameR, me.cellsR}, beginIdx: Int) {
        for var c = 0; c < gridDim; c += 1 {
            val col = arr@me.frameR Cell^{me.cellsR}[gridDim];
            for var l = 0; l < gridDim; l += 1 {
                col[l] = me.cells[l][c];
            };
            sectors[beginIdx + c] = new Sector(me.cellsR, col);
        }
    }

    private fn mkSquareSectors(sectors: arr^ Sector^{me.frameR, me.cellsR}, var sectorIdx: Int){
        val nSectPerSize = gridDim / sectorDim;
        for var sl = 0; sl < nSectPerSize; sl += 1 {
            for var sc = 0; sc < nSectPerSize; sc += 1 {
                val cells = arr@me.frameR Cell^{me.cellsR}[sectorDim*sectorDim];
                var i = 0;
                for var deltaL = 0; deltaL < sectorDim; deltaL += 1 {
                    for var deltaC = 0; deltaC < sectorDim; deltaC += 1 {
                        cells[i] = me.cells[sl*sectorDim + deltaL][sc*sectorDim + deltaC];
                        i += 1;
                    }
                };
                sectors[sectorIdx] = new Sector(me.cellsR, cells);
                sectorIdx += 1;
            }
        }
    }

    // Return true if it could infer the value of a cell
    // Once this happens, exit immediately
    fn inferUniqueCandidate() -> Bool {
        for var l = 0; l < len me.cells; l += 1 {
            for var c = 0; c < len me.cells[l]; c += 1 {
                val cell = me.cells[l][c];
                if cell.value == emptyCellMarker {
                    val maybeUnique = getUniqueCandidateOpt(cell.candidates);
                    if maybeUnique is IntSome {
                        cell.value = maybeUnique.value;
                        return true;
                    }
                }
            }
        };
        return false;
    }

    private fn getUniqueCandidateOpt(candidates: arr^ Bool) -> IntOption {
        var unique: IntOption = new None();
        for var i = 0; i < len candidates; i += 1 {
            if candidates[i] && unique is None {
                unique = new IntSome(i + 1);
            } else if candidates[i] {
                return new None();
            }
        };
        return unique;
    }

}
